generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id                 String       @id @default(uuid()) @db.Uuid
  firstName          String?      @map("first_name")
  lastName           String?      @map("last_name")
  llcName            String?      @map("llc_name")
  phone1             String?
  phone2             String?
  phone3             String?
  email1             String?
  email2             String?
  email3             String?
  propertyAddress    String?      @map("property_address")
  contactAddress     String?      @map("contact_address")
  city               String?
  state              String?
  propertyCounty     String?      @map("property_county")
  propertyType       String?      @map("property_type")
  bedrooms           Int?
  totalBathrooms     Decimal?     @map("total_bathrooms") @db.Decimal(4, 2)
  buildingSqft       Int?         @map("building_sqft")
  effectiveYearBuilt Int?         @map("effective_year_built")
  estValue           Decimal?     @map("est_value") @db.Decimal(15, 2)
  estEquity          Decimal?     @map("est_equity") @db.Decimal(15, 2)
  dnc                Boolean?     @default(false)
  dncReason          String?      @map("dnc_reason")
  dealStatus         DealStatus?  @default(lead) @map("deal_status")
  notes              String?
  avatarUrl          String?      @map("avatar_url")
  createdAt          DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?    @updatedAt @map("updated_at") @db.Timestamptz(6)
  contact_tags       ContactTag[]
  messages           Message[]
  activities         Activity[]
  telnyx_messages    TelnyxMessage[]
  conversations      Conversation[]
  email_messages     EmailMessage[]
  email_conversations EmailConversation[]
  assignments        ContactAssignment[]

  // Performance indexes for common queries
  @@index([createdAt(sort: Desc)], name: "idx_contacts_created_at")
  @@index([firstName, lastName], name: "idx_contacts_name")
  @@index([phone1], name: "idx_contacts_phone1")
  @@index([email1], name: "idx_contacts_email1")
  @@index([dealStatus, createdAt(sort: Desc)], name: "idx_contacts_status_created")
  @@index([city, state], name: "idx_contacts_location")
  @@index([propertyType], name: "idx_contacts_property_type")
  @@index([dnc], name: "idx_contacts_dnc")
  @@map("contacts")
}

model Tag {
  id           String       @id @default(uuid()) @db.Uuid
  name         String       @unique
  color        String       @default("#3B82F6")
  description  String?
  is_system    Boolean?     @default(false)
  created_at   DateTime     @default(now()) @db.Timestamptz(6)
  updated_at   DateTime     @updatedAt @db.Timestamptz(6)
  contact_tags ContactTag[]

  @@map("tags")
}

model ContactTag {
  id         String   @id @default(uuid()) @db.Uuid
  contact_id String   @db.Uuid
  tag_id     String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  created_by String?  @db.Uuid
  contact    Contact  @relation(fields: [contact_id], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([contact_id, tag_id])
  @@map("contact_tags")
}

model Message {
  id              String           @id @default(uuid()) @db.Uuid
  contact_id      String           @db.Uuid
  conversation_id String?
  sent_by         String?          @db.Uuid
  direction       MessageDirection
  content         String
  timestamp       DateTime         @default(now()) @db.Timestamptz(6)
  status          MessageStatus    @default(sent)
  message_type    MessageType?     @default(sms)
  phone_number    String?
  message_sid     String?
  error_code      String?
  error_message   String?
  media_urls      String[]
  cost            Decimal?         @db.Decimal(10, 4)
  segments        Int?             @default(1)
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime         @updatedAt @db.Timestamptz(6)
  contact         Contact          @relation(fields: [contact_id], references: [id], onDelete: Cascade)
  sentBy          User?            @relation("UserMessages", fields: [sent_by], references: [id], onDelete: SetNull)

  @@map("messages")
}

model Call {
  id                 String        @id @default(uuid()) @db.Uuid
  contact_id         String        @db.Uuid
  direction          CallDirection
  duration           Int?          @default(0)
  timestamp          DateTime      @default(now()) @db.Timestamptz(6)
  status             CallStatus
  call_type          CallType?     @default(voice)
  from_number        String?
  to_number          String?
  call_sid           String?
  recording_url      String?
  recording_duration Int?
  cost               Decimal?      @db.Decimal(10, 4)
  notes              String?
  answered_by        String?
  hangup_cause       String?
  created_at         DateTime      @default(now()) @db.Timestamptz(6)
  updated_at         DateTime      @updatedAt @db.Timestamptz(6)

  @@map("calls")
}

model Email {
  id            String         @id @default(uuid()) @db.Uuid
  contact_id    String         @db.Uuid
  direction     EmailDirection
  subject       String
  body          String
  html_body     String?
  timestamp     DateTime       @default(now()) @db.Timestamptz(6)
  status        EmailStatus    @default(sent)
  from_email    String?
  to_email      String?
  cc_emails     String[]
  bcc_emails    String[]
  reply_to      String?
  message_id    String?
  thread_id     String?
  in_reply_to   String?
  attachments   Json?          @default("[]")
  headers       Json?          @default("{}")
  bounce_reason String?
  spam_score    Decimal?       @db.Decimal(3, 2)
  opened_at     DateTime?      @db.Timestamptz(6)
  clicked_at    DateTime?      @db.Timestamptz(6)
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime       @updatedAt @db.Timestamptz(6)

  @@map("emails")
}

model Activity {
  id                   String            @id @default(uuid()) @db.Uuid
  contact_id           String            @db.Uuid
  deal_id              String?           @db.Uuid
  type                 ActivityType
  title                String
  description          String?
  due_date             DateTime?         @db.Timestamptz(6)
  status               ActivityStatus    @default(planned)
  priority             ActivityPriority? @default(medium)
  assigned_to          String?           @db.Uuid
  created_by           String?           @db.Uuid
  location             String?
  duration_minutes     Int?
  reminder_minutes     Int?
  is_all_day           Boolean?          @default(false)
  recurrence_rule      String?
  parent_activity_id   String?           @db.Uuid
  external_calendar_id String?
  external_event_id    String?
  completed_at         DateTime?         @db.Timestamptz(6)
  completed_by         String?           @db.Uuid
  result               String?
  next_action          String?
  created_at           DateTime          @default(now()) @db.Timestamptz(6)
  updated_at           DateTime          @updatedAt @db.Timestamptz(6)
  contact              Contact           @relation(fields: [contact_id], references: [id], onDelete: Cascade)
  createdBy            User?             @relation("UserActivities", fields: [created_by], references: [id], onDelete: SetNull)

  @@index([contact_id, due_date], name: "idx_activities_contact_due")
  @@index([created_by, created_at(sort: Desc)], name: "idx_activities_created_by")
  @@index([status, due_date], name: "idx_activities_status_due")
  @@index([assigned_to, due_date], name: "idx_activities_assigned_due")
  @@map("activities")
}

model Deal {
  id                  String    @id @default(uuid()) @db.Uuid
  contact_id          String    @db.Uuid
  name                String
  stage               DealStage @default(lead)
  value               Decimal   @default(0) @db.Decimal(15, 2)
  probability         Int?      @default(0)
  expected_close_date DateTime? @db.Date
  actual_close_date   DateTime? @db.Date
  source              String?
  campaign            String?
  lead_score          Int?      @default(0)
  assigned_to         String?   @db.Uuid
  team_id             String?   @db.Uuid
  pipeline            String?   @default("default")
  lost_reason         String?
  won_reason          String?
  competitor          String?
  next_step           String?
  notes               String?
  custom_fields       Json?     @default("{}")
  created_at          DateTime  @default(now()) @db.Timestamptz(6)
  updated_at          DateTime  @updatedAt @db.Timestamptz(6)

  @@map("deals")
}

model DealTag {
  id         String   @id @default(uuid()) @db.Uuid
  deal_id    String   @db.Uuid
  tag_id     String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  created_by String?  @db.Uuid

  @@unique([deal_id, tag_id])
  @@map("deal_tags")
}

model DealStageHistory {
  id                String                   @id @default(uuid()) @db.Uuid
  deal_id           String                   @db.Uuid
  old_stage         String?
  new_stage         String
  old_value         Decimal?                 @db.Decimal(15, 2)
  new_value         Decimal?                 @db.Decimal(15, 2)
  old_probability   Int?
  new_probability   Int?
  changed_by        String?                  @db.Uuid
  change_reason     String?
  notes             String?
  duration_in_stage Unsupported("interval")?
  changed_at        DateTime                 @default(now()) @db.Timestamptz(6)

  @@map("deal_stage_history")
}

model Document {
  id                 String        @id @default(uuid()) @db.Uuid
  contact_id         String?       @db.Uuid
  deal_id            String?       @db.Uuid
  activity_id        String?       @db.Uuid
  name               String
  original_name      String?
  file_path          String
  file_size          Int?
  mime_type          String?
  file_extension     String?
  document_type      DocumentType?
  category           String?
  description        String?
  is_public          Boolean?      @default(false)
  is_archived        Boolean?      @default(false)
  version            Int?          @default(1)
  parent_document_id String?       @db.Uuid
  checksum           String?
  uploaded_by        String?       @db.Uuid
  uploaded_at        DateTime      @default(now()) @db.Timestamptz(6)
  last_accessed_at   DateTime?     @db.Timestamptz(6)
  access_count       Int?          @default(0)
  tags               String[]
  metadata           Json?         @default("{}")
  created_at         DateTime      @default(now()) @db.Timestamptz(6)
  updated_at         DateTime      @updatedAt @db.Timestamptz(6)

  @@map("documents")
}

model Conversation {
  id                     String                @id @default(uuid()) @db.Uuid
  contact_id             String                @db.Uuid
  phone_number           String
  channel                ConversationChannel?  @default(sms)
  last_message_id        String?               @db.Uuid
  last_message_content   String?
  last_message_at        DateTime?             @db.Timestamptz(6)
  last_message_direction MessageDirection?
  last_sender_number     String?               @map("last_sender_number")
  message_count          Int?                  @default(0)
  unread_count           Int?                  @default(0)
  is_archived            Boolean?              @default(false)
  is_starred             Boolean?              @default(false)
  is_muted               Boolean?              @default(false)
  assigned_to            String?               @db.Uuid
  status                 ConversationStatus?   @default(active)
  priority               ConversationPriority? @default(normal)
  labels                 String[]
  metadata               Json?                 @default("{}")
  created_at             DateTime              @default(now()) @db.Timestamptz(6)
  updated_at             DateTime              @updatedAt @db.Timestamptz(6)
  contact                Contact               @relation(fields: [contact_id], references: [id], onDelete: Cascade)

  @@unique([contact_id, phone_number])
  @@index([contact_id], name: "idx_conversations_contact")
  @@index([last_message_at(sort: Desc)], name: "idx_conversations_last_message")
  @@index([unread_count], name: "idx_conversations_unread")
  @@index([assigned_to], name: "idx_conversations_assigned")
  @@map("conversations")
}

model Assistant {
  id                               String                  @id @default(uuid()) @db.Uuid
  name                             String
  description                      String?
  first_message                    String?
  system_prompt                    String?
  model_provider                   AssistantModelProvider? @default(openai)
  model                            String?                 @default("gpt-3.5-turbo")
  voice_provider                   AssistantVoiceProvider? @default(playht)
  voice_id                         String?
  voice_settings                   Json?                   @default("{}")
  language                         String?                 @default("en")
  response_delay_seconds           Decimal?                @db.Decimal(4, 2)
  llm_request_delay_seconds        Decimal?                @db.Decimal(4, 2)
  interruption_threshold           Int?                    @default(100)
  max_duration_seconds             Int?                    @default(1800)
  silence_timeout_seconds          Int?                    @default(30)
  background_sound                 String?                 @default("office")
  backchaneling_enabled            Boolean?                @default(false)
  background_denoising_enabled     Boolean?                @default(true)
  model_output_in_messages_enabled Boolean?                @default(false)
  transport_configurations         Json?                   @default("{}")
  recording_enabled                Boolean?                @default(true)
  video_recording_enabled          Boolean?                @default(false)
  end_call_message                 String?
  end_call_phrases                 String[]
  voicemail_detection_enabled      Boolean?                @default(true)
  voicemail_message                String?
  analysis_plan                    Json?                   @default("{}")
  artifact_plan                    Json?                   @default("{}")
  message_plan                     Json?                   @default("{}")
  start_speaking_plan              Json?                   @default("{}")
  stop_speaking_plan               Json?                   @default("{}")
  monitor_plan                     Json?                   @default("{}")
  credential_ids                   Json?                   @default("{}")
  server_url                       String?
  server_url_secret                String?
  is_active                        Boolean?                @default(true)
  usage_count                      Int?                    @default(0)
  success_rate                     Decimal?                @db.Decimal(5, 2)
  average_duration                 Int?                    @default(0)
  metadata                         Json?                   @default("{}")
  created_at                       DateTime                @default(now()) @db.Timestamptz(6)
  updated_at                       DateTime                @updatedAt @db.Timestamptz(6)

  @@map("assistants")
}

model PhoneNumber {
  id                       String               @id @default(uuid()) @db.Uuid
  number                   String               @unique
  formatted_number         String?
  country_code             String?              @default("+1")
  area_code                String?
  name                     String?
  provider                 PhoneNumberProvider? @default(twilio)
  provider_account_sid     String?
  provider_phone_number_id String?
  assistant_id             String?              @db.Uuid
  squad_id                 String?              @db.Uuid
  server_url               String?
  server_url_secret        String?
  capabilities             String[]             @default(["voice", "sms"])
  voice_settings           Json?                @default("{}")
  sms_settings             Json?                @default("{}")
  fallback_destination     String?
  is_active                Boolean?             @default(true)
  is_verified              Boolean?             @default(false)
  purchase_date            DateTime?            @db.Date
  monthly_cost             Decimal?             @db.Decimal(8, 2)
  usage_count              Int?                 @default(0)
  last_used_at             DateTime?            @db.Timestamptz(6)
  metadata                 Json?                @default("{}")
  created_at               DateTime             @default(now()) @db.Timestamptz(6)
  updated_at               DateTime             @updatedAt @db.Timestamptz(6)

  @@map("phone_numbers")
}

model VapiCall {
  id                             String             @id @default(uuid()) @db.Uuid
  vapi_call_id                   String?            @unique
  org_id                         String?
  assistant_id                   String?            @db.Uuid
  assistant_overrides            Json?              @default("{}")
  squad_id                       String?            @db.Uuid
  phone_number_id                String?            @db.Uuid
  customer_id                    String?            @db.Uuid
  name                           String?
  type                           VapiCallType
  status                         VapiCallStatus?    @default(queued)
  ended_reason                   String?
  messages                       Json?              @default("[]")
  messages_openai_formatted      Json?              @default("[]")
  phone_call_provider            VapiCallProvider?  @default(twilio)
  phone_call_provider_id         String?
  phone_call_transport           VapiCallTransport? @default(pstn)
  phone_call_provider_details    Json?              @default("{}")
  started_at                     DateTime?          @db.Timestamptz(6)
  ended_at                       DateTime?          @db.Timestamptz(6)
  duration                       Int?
  cost                           Decimal?           @db.Decimal(10, 4)
  cost_breakdown                 Json?              @default("{}")
  transcript                     String?
  recording_url                  String?
  stereo_recording_url           String?
  mono_recording_url             String?
  summary                        String?
  analysis                       Json?              @default("{}")
  artifacts                      Json?              @default("[]")
  monitor                        Json?              @default("{}")
  credential_ids_used            Json?              @default("{}")
  transport_configuration_twilio Json?              @default("{}")
  transport_configuration_vonage Json?              @default("{}")
  transport_configuration_vapi   Json?              @default("{}")
  created_at                     DateTime           @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime           @updatedAt @db.Timestamptz(6)

  @@map("vapi_calls")
}

model ImportHistory {
  id                String   @id @default(uuid()) @db.Uuid
  fileName          String?  @map("file_name")
  importedAt        DateTime @default(now()) @map("imported_at")
  totalRecords      Int?     @map("total_records")
  importedCount     Int?     @map("imported_count")
  duplicateCount    Int?     @map("duplicate_count")
  missingPhoneCount Int?     @map("missing_phone_count")
  errors            Json?

  @@map("import_history")
}

model TelnyxPhoneNumber {
  id                String   @id @default(uuid()) @db.Uuid
  phoneNumber       String   @unique @map("phone_number")
  telnyxId          String?  @map("telnyx_id")
  state             String?
  city              String?
  country           String   @default("US")
  isActive          Boolean  @default(true) @map("is_active")
  capabilities      String[] @default(["SMS", "VOICE"])
  monthlyPrice      Decimal? @map("monthly_price") @db.Decimal(8, 2)
  setupPrice        Decimal? @map("setup_price") @db.Decimal(8, 2)
  purchasedAt       DateTime @default(now()) @map("purchased_at")
  lastUsedAt        DateTime? @map("last_used_at")
  totalSmsCount     Int      @default(0) @map("total_sms_count")
  totalCallCount    Int      @default(0) @map("total_call_count")
  totalCost         Decimal  @default(0) @map("total_cost") @db.Decimal(10, 4)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("telnyx_phone_numbers")
}

model TelnyxMessage {
  id                String            @id @default(uuid()) @db.Uuid
  telnyxMessageId   String?           @unique @map("telnyx_message_id")
  contactId         String?           @map("contact_id") @db.Uuid
  fromNumber        String            @map("from_number")
  toNumber          String            @map("to_number")
  direction         MessageDirection
  content           String
  status            TelnyxMessageStatus @default(queued)
  cost              Decimal?          @db.Decimal(10, 4)
  segments          Int?              @default(1)
  errorCode         String?           @map("error_code")
  errorMessage      String?           @map("error_message")
  deliveredAt       DateTime?         @map("delivered_at")
  failedAt          DateTime?         @map("failed_at")
  readAt            DateTime?         @map("read_at")
  webhookData       Json?             @map("webhook_data")
  blastId           String?           @map("blast_id") @db.Uuid
  automationId     String?           @map("automation_id") @db.Uuid
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  contact           Contact?          @relation(fields: [contactId], references: [id], onDelete: Cascade)
  automation        TextAutomation?   @relation("AutomationMessages", fields: [automationId], references: [id], onDelete: SetNull)

  @@index([contactId, createdAt(sort: Desc)], name: "idx_telnyx_messages_contact_created")
  @@index([fromNumber], name: "idx_telnyx_messages_from")
  @@index([toNumber], name: "idx_telnyx_messages_to")
  @@index([direction, createdAt(sort: Desc)], name: "idx_telnyx_messages_direction_created")
  @@map("telnyx_messages")
}

model TelnyxCall {
  id                String         @id @default(uuid()) @db.Uuid
  telnyxCallId      String?        @unique @map("telnyx_call_id")
  contactId         String         @map("contact_id") @db.Uuid
  initiatedBy       String?        @map("initiated_by") @db.Uuid
  fromNumber        String         @map("from_number")
  toNumber          String         @map("to_number")
  direction         CallDirection
  status            TelnyxCallStatus @default(initiated)
  duration          Int?           @default(0) // in seconds
  cost              Decimal?       @db.Decimal(10, 4)
  recordingUrl      String?        @map("recording_url")
  answeredAt        DateTime?      @map("answered_at")
  endedAt           DateTime?      @map("ended_at")
  hangupCause       String?        @map("hangup_cause")
  webhookData       Json?          @map("webhook_data")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")

  // Relations
  initiatedByUser   User?          @relation("UserCalls", fields: [initiatedBy], references: [id], onDelete: SetNull)

  @@index([contactId, createdAt(sort: Desc)], name: "idx_telnyx_calls_contact_created")
  @@index([fromNumber], name: "idx_telnyx_calls_from")
  @@index([toNumber], name: "idx_telnyx_calls_to")
  @@index([direction, createdAt(sort: Desc)], name: "idx_telnyx_calls_direction_created")
  @@map("telnyx_calls")
}

model TelnyxBilling {
  id                String   @id @default(uuid()) @db.Uuid
  phoneNumber       String   @map("phone_number")
  recordType        TelnyxBillingType @map("record_type")
  recordId          String   @map("record_id") // message_id or call_id
  cost              Decimal  @db.Decimal(10, 4)
  currency          String   @default("USD")
  billingDate       DateTime @map("billing_date")
  description       String?
  metadata          Json?
  createdAt         DateTime @default(now()) @map("created_at")

  @@map("telnyx_billing")
}

model TextBlast {
  id                String            @id @default(uuid()) @db.Uuid
  name              String?
  message           String
  totalContacts     Int               @map("total_contacts")
  sentCount         Int               @default(0) @map("sent_count")
  deliveredCount    Int               @default(0) @map("delivered_count")
  failedCount       Int               @default(0) @map("failed_count")
  status            TextBlastStatus   @default(pending)
  senderNumbers     Json              @map("sender_numbers") // Array of phone numbers
  delaySeconds      Int               @default(1) @map("delay_seconds")
  contactFilters    Json?             @map("contact_filters") // Store filter criteria
  selectedContacts  Json?             @map("selected_contacts") // Store contact IDs
  currentIndex      Int               @default(0) @map("current_index")
  isPaused          Boolean           @default(false) @map("is_paused")
  startedAt         DateTime?         @map("started_at")
  completedAt       DateTime?         @map("completed_at")
  pausedAt          DateTime?         @map("paused_at")
  resumedAt         DateTime?         @map("resumed_at")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  @@map("text_blasts")
}

model MessageTemplate {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  content     String   @db.Text
  variables   Json     @default("[]") // Array of variable names like ["firstName", "lastName"]
  description String?  @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  usageCount  Int      @default(0) @map("usage_count") // Track how often template is used
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("message_templates")
}

model TextAutomation {
  id                String                @id @default(uuid()) @db.Uuid
  name              String?
  message           String                @db.Text
  totalContacts     Int                   @map("total_contacts")
  currentCycle      Int                   @default(1) @map("current_cycle")
  totalCycles       Int?                  @map("total_cycles")
  isIndefinite      Boolean               @default(true) @map("is_indefinite")
  status            TextAutomationStatus  @default(draft)
  messageDelay      Int                   @default(1) @map("message_delay") // seconds
  loopDelay         Int                   @default(1) @map("loop_delay")
  loopDelayUnit     TextAutomationDelayUnit @map("loop_delay_unit") @default(weeks)
  senderNumbers     Json                  @map("sender_numbers") // Array of phone numbers
  selectedContacts  Json                  @map("selected_contacts") // Array of contact IDs
  contactFilters    Json?                 @map("contact_filters") // Store filter criteria
  currentIndex      Int                   @default(0) @map("current_index")
  sentCount         Int                   @default(0) @map("sent_count")
  deliveredCount    Int                   @default(0) @map("delivered_count")
  failedCount       Int                   @default(0) @map("failed_count")
  nextRunAt         DateTime?             @map("next_run_at")
  startedAt         DateTime?             @map("started_at")
  lastRunAt         DateTime?             @map("last_run_at")
  pausedAt          DateTime?             @map("paused_at")
  completedAt       DateTime?             @map("completed_at")
  createdBy         String?               @map("created_by") @db.Uuid
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @updatedAt @map("updated_at")

  // Relations
  messages          TelnyxMessage[]       @relation("AutomationMessages")
  createdByUser     User?                 @relation("UserAutomations", fields: [createdBy], references: [id], onDelete: SetNull)

  @@map("text_automations")
}

enum TextBlastStatus {
  draft
  pending
  running
  paused
  completed
  failed
  cancelled
}

enum TextAutomationStatus {
  draft
  running
  paused
  completed
  stopped
  failed
}

enum TextAutomationDelayUnit {
  hours
  days
  weeks
  months
}

enum DealStatus {
  lead
  qualified
  proposal
  negotiation
  closed_won
  closed_lost
}

enum MessageType {
  sms
  mms
}

enum MessageDirection {
  inbound
  outbound
}

enum MessageStatus {
  sent
  delivered
  read
  failed
  pending
}

enum CallDirection {
  inbound
  outbound
}

enum CallStatus {
  completed
  missed
  voicemail
  failed
  busy
  no_answer
  cancelled
}

enum CallType {
  voice
  conference
  forwarded
}

enum EmailDirection {
  inbound
  outbound
}

enum EmailStatus {
  sent
  delivered
  read
  failed
  bounced
  spam
  pending
}

enum ActivityType {
  call
  meeting
  email
  text
  task
  note
  follow_up
  appointment
  demo
}

enum ActivityStatus {
  planned
  in_progress
  completed
  cancelled
  overdue
}

enum ActivityPriority {
  low
  medium
  high
  urgent
}

enum DealStage {
  lead
  qualified
  proposal
  negotiation
  contract
  closing
  closed_won
  closed_lost
}

enum DocumentType {
  contract
  invoice
  receipt
  photo
  document
  presentation
  spreadsheet
  other
}

enum ConversationChannel {
  sms
  whatsapp
  email
  voice
}

enum ConversationStatus {
  active
  closed
  spam
  blocked
}

enum ConversationPriority {
  low
  normal
  high
  urgent
}

enum AssistantModelProvider {
  openai
  anthropic
  together_ai
  anyscale
}

enum AssistantVoiceProvider {
  elevenlabs @map("11labs")
  playht
  rime_ai
  neets
  openai_tts @map("openai")
}

enum PhoneNumberProvider {
  twilio
  vonage
  vapi
}

enum VapiCallType {
  inboundPhoneCall
  outboundPhoneCall
  webCall
}

enum VapiCallStatus {
  queued
  ringing
  in_progress
  forwarding
  ended
}

enum VapiCallProvider {
  twilio
  vonage
  vapi
}

enum VapiCallTransport {
  sip
  pstn
}

enum TelnyxMessageStatus {
  queued
  sending
  sent
  delivered
  delivery_failed
  failed
  received
}

enum TelnyxCallStatus {
  initiated
  ringing
  answered
  bridged
  hangup
  failed
}

enum TelnyxBillingType {
  sms
  call
  number_rental
}

enum EmailEncryptionType {
  SSL
  TLS
  NONE
}

enum EmailAccountStatus {
  active
  inactive
  error
}

enum UserRole {
  ADMIN
  TEAM_USER
}

enum UserStatus {
  active
  inactive
  suspended
}

enum EmailMessageStatus {
  draft
  sent
  delivered
  failed
  bounced
}

model EmailAccount {
  id                String              @id @default(uuid()) @db.Uuid
  emailAddress      String              @unique @map("email_address")
  displayName       String              @map("display_name")

  // SMTP Settings (Outgoing)
  smtpHost          String              @map("smtp_host")
  smtpPort          Int                 @map("smtp_port")
  smtpEncryption    EmailEncryptionType @map("smtp_encryption")
  smtpUsername      String              @map("smtp_username")
  smtpPassword      String              @map("smtp_password") // Encrypted

  // IMAP Settings (Incoming)
  imapHost          String?             @map("imap_host")
  imapPort          Int?                @map("imap_port")
  imapEncryption    EmailEncryptionType? @map("imap_encryption")
  imapUsername      String?             @map("imap_username")
  imapPassword      String?             @map("imap_password") // Encrypted

  // Additional Settings
  signature         String?
  isDefault         Boolean             @default(false) @map("is_default")
  status            EmailAccountStatus  @default(active)
  lastSyncAt        DateTime?           @map("last_sync_at")

  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  // Relations
  sentEmails        EmailMessage[]      @relation("SentEmails")
  emailBlasts       EmailBlast[]
  assignedUsers     User[]

  @@map("email_accounts")
}

model EmailMessage {
  id                String              @id @default(uuid()) @db.Uuid
  messageId         String?             @unique @map("message_id") // Email Message-ID header
  contactId         String?             @map("contact_id") @db.Uuid
  emailAccountId    String              @map("email_account_id") @db.Uuid
  sentBy            String?             @map("sent_by") @db.Uuid

  // Email Details
  fromEmail         String              @map("from_email")
  fromName          String?             @map("from_name")
  toEmails          String[]            @map("to_emails")
  ccEmails          String[]            @default([]) @map("cc_emails")
  bccEmails         String[]            @default([]) @map("bcc_emails")

  subject           String
  content           String              // HTML content
  textContent       String?             @map("text_content") // Plain text version

  // Message Properties
  direction         MessageDirection
  status            EmailMessageStatus  @default(draft)
  priority          String?             @default("normal")

  // Tracking
  sentAt            DateTime?           @map("sent_at")
  deliveredAt       DateTime?           @map("delivered_at")
  openedAt          DateTime?           @map("opened_at")
  clickedAt         DateTime?           @map("clicked_at")

  // Blast Association
  blastId           String?             @map("blast_id") @db.Uuid

  // Metadata
  headers           Json?               // Email headers
  attachments       Json?               // Attachment info

  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  // Relations
  contact           Contact?            @relation(fields: [contactId], references: [id], onDelete: SetNull)
  emailAccount      EmailAccount        @relation("SentEmails", fields: [emailAccountId], references: [id], onDelete: Cascade)
  blast             EmailBlast?         @relation(fields: [blastId], references: [id], onDelete: SetNull)
  sentByUser        User?               @relation("UserEmails", fields: [sentBy], references: [id], onDelete: SetNull)

  @@map("email_messages")
}

model EmailConversation {
  id                String              @id @default(uuid()) @db.Uuid
  contactId         String              @map("contact_id") @db.Uuid
  emailAddress      String              @map("email_address")

  lastMessageId     String?             @map("last_message_id") @db.Uuid
  lastMessageContent String?            @map("last_message_content")
  lastMessageAt     DateTime?           @map("last_message_at")
  lastMessageDirection MessageDirection? @map("last_message_direction")

  messageCount      Int                 @default(0) @map("message_count")
  unreadCount       Int                 @default(0) @map("unread_count")

  isArchived        Boolean             @default(false) @map("is_archived")
  isStarred         Boolean             @default(false) @map("is_starred")

  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  // Relations
  contact           Contact             @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([contactId, emailAddress])
  @@map("email_conversations")
}

model EmailTemplate {
  id                String              @id @default(uuid()) @db.Uuid
  name              String
  subject           String
  content           String              // HTML content
  textContent       String?             @map("text_content") // Plain text version
  category          String?             @default("general")

  isSystem          Boolean             @default(false) @map("is_system")
  isActive          Boolean             @default(true) @map("is_active")

  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  @@map("email_templates")
}

model EmailBlast {
  id                String              @id @default(uuid()) @db.Uuid
  name              String?
  subject           String
  content           String              // HTML content
  textContent       String?             @map("text_content")

  emailAccountId    String              @map("email_account_id") @db.Uuid

  // Recipients
  contactIds        String[]            @map("contact_ids") @db.Uuid
  ccEmails          String[]            @default([]) @map("cc_emails")
  bccEmails         String[]            @default([]) @map("bcc_emails")

  // Blast Settings
  delayBetweenEmails Int               @default(0) @map("delay_between_emails") // seconds

  // Status
  status            TextBlastStatus     @default(draft)
  totalContacts     Int                 @default(0) @map("total_contacts")
  sentCount         Int                 @default(0) @map("sent_count")
  failedCount       Int                 @default(0) @map("failed_count")

  startedAt         DateTime?           @map("started_at")
  completedAt       DateTime?           @map("completed_at")

  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  // Relations
  emailAccount      EmailAccount        @relation(fields: [emailAccountId], references: [id], onDelete: Cascade)
  messages          EmailMessage[]

  @@map("email_blasts")
}

model User {
  id                String              @id @default(uuid()) @db.Uuid
  email             String              @unique
  firstName         String              @map("first_name")
  lastName          String              @map("last_name")
  password          String              // Hashed password
  role              UserRole            @default(TEAM_USER)
  status            UserStatus          @default(active)

  // Admin relationship
  adminId           String?             @map("admin_id") @db.Uuid
  admin             User?               @relation("AdminTeam", fields: [adminId], references: [id], onDelete: Cascade)
  teamUsers         User[]              @relation("AdminTeam")

  // Assigned resources for team users
  assignedPhoneNumber String?           @map("assigned_phone_number")
  assignedEmailId   String?             @map("assigned_email_id") @db.Uuid
  assignedEmail     EmailAccount?       @relation(fields: [assignedEmailId], references: [id], onDelete: SetNull)

  // Profile settings
  avatar            String?
  timezone          String?             @default("UTC")
  lastLoginAt       DateTime?           @map("last_login_at")

  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  // Relations
  sessions          Session[]
  assignedContacts  ContactAssignment[]
  assignedContactsBy ContactAssignment[] @relation("AssignedBy")
  activities        Activity[]          @relation("UserActivities")
  sentMessages      Message[]           @relation("UserMessages")
  sentEmails        EmailMessage[]      @relation("UserEmails")
  calls             TelnyxCall[]        @relation("UserCalls")
  accounts          Account[]           @relation("UserAccounts")
  automations       TextAutomation[]    @relation("UserAutomations")

  @@map("users")
}

model Session {
  id                String              @id @default(uuid()) @db.Uuid
  userId            String              @map("user_id") @db.Uuid
  sessionToken      String              @unique @map("session_token")
  expires           DateTime

  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ContactAssignment {
  id                String              @id @default(uuid()) @db.Uuid
  userId            String              @map("user_id") @db.Uuid
  contactId         String              @map("contact_id") @db.Uuid
  assignedBy        String              @map("assigned_by") @db.Uuid
  assignedAt        DateTime            @default(now()) @map("assigned_at")

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact           Contact             @relation(fields: [contactId], references: [id], onDelete: Cascade)
  assignedByUser    User                @relation("AssignedBy", fields: [assignedBy], references: [id], onDelete: Cascade)

  @@unique([userId, contactId])
  @@index([userId], name: "idx_contact_assignments_user")
  @@index([contactId], name: "idx_contact_assignments_contact")
  @@index([assignedBy], name: "idx_contact_assignments_assigned_by")
  @@map("contact_assignments")
}

model Account {
  id                String              @id @default(uuid()) @db.Uuid
  userId            String              @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String              @map("provider_account_id")
  refresh_token     String?             @db.Text
  access_token      String?             @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?             @db.Text
  session_state     String?

  user              User                @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier        String
  token             String              @unique
  expires           DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
